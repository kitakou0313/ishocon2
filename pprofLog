Total: 25.18s
ROUTINE ======================== main.cacheAllUsers in /home/ishocon/webapp/go/user.go
     200ms      4.53s (flat, cum) 17.99% of Total
         .          .     20:   if err != nil {
         .          .     21:           panic(err.Error())
         .          .     22:   }
         .          .     23:   defer rows.Close()
         .          .     24:
      10ms      1.17s     25:   for rows.Next() {
      10ms      130ms     26:           u := User{}
         .      1.31s     27:           err = rows.Scan(&u.ID, &u.Name, &u.Address, &u.MyNumber, &u.Votes)
         .          .     28:           if err != nil {
         .          .     29:                   panic(err.Error())
         .          .     30:           }
         .      220ms     31:           key := u.Name + u.Address + u.MyNumber
     180ms      1.70s     32:           myNumberToUserCache[key] = u
         .          .     33:   }
         .          .     34:
         .          .     35:}
         .          .     36:
         .          .     37:func getUser(name string, address string, myNumber string) (User, error) {
ROUTINE ======================== main.createVote in /home/ishocon/webapp/go/vote.go
         0      1.51s (flat, cum)  6.00% of Total
         .          .     25:   row.Scan(&user_id, &count)
         .          .     26:   return
         .          .     27:}
         .          .     28:
         .          .     29:func createVote(userID int, candidateID int, keyword string, voteNum int) {
         .      1.51s     30:   _, err := db.Exec("INSERT INTO votes_sum (user_id, candidate_id, keyword, votes_num) VALUES (?, ?, ?, ?)",
         .          .     31:           userID, candidateID, keyword, voteNum)
         .          .     32:
         .          .     33:   if err != nil {
         .          .     34:           panic(err)
         .          .     35:   }
ROUTINE ======================== main.getAllPartyName in /home/ishocon/webapp/go/candidate.go
         0      160ms (flat, cum)  0.64% of Total
         .          .     66:
         .          .     67:   return nameToCandidatesCache[name], nil
         .          .     68:}
         .          .     69:
         .          .     70:func getAllPartyName() (partyNames []string) {
         .      150ms     71:   rows, err := db.Query("SELECT political_party FROM candidates GROUP BY political_party")
         .          .     72:   if err != nil {
         .          .     73:           panic(err.Error())
         .          .     74:   }
         .          .     75:   defer rows.Close()
         .          .     76:
         .          .     77:   for rows.Next() {
         .       10ms     78:           var name string
         .          .     79:           err = rows.Scan(&name)
         .          .     80:           if err != nil {
         .          .     81:                   panic(err.Error())
         .          .     82:           }
         .          .     83:           partyNames = append(partyNames, name)
ROUTINE ======================== main.getCandidatesByPoliticalParty in /home/ishocon/webapp/go/candidate.go
         0       50ms (flat, cum)   0.2% of Total
         .          .     84:   }
         .          .     85:   return
         .          .     86:}
         .          .     87:
         .          .     88:func getCandidatesByPoliticalParty(party string) (candidates []Candidate) {
         .       40ms     89:   rows, err := db.Query("SELECT * FROM candidates WHERE political_party = ?", party)
         .          .     90:   if err != nil {
         .          .     91:           panic(err.Error())
         .          .     92:   }
         .          .     93:   defer rows.Close()
         .          .     94:
         .       10ms     95:   for rows.Next() {
         .          .     96:           c := Candidate{}
         .          .     97:           err = rows.Scan(&c.ID, &c.Name, &c.PoliticalParty, &c.Sex)
         .          .     98:           if err != nil {
         .          .     99:                   panic(err.Error())
         .          .    100:           }
ROUTINE ======================== main.getElectionResult in /home/ishocon/webapp/go/candidate.go
         0      270ms (flat, cum)  1.07% of Total
         .          .    102:   }
         .          .    103:   return
         .          .    104:}
         .          .    105:
         .          .    106:func getElectionResult() (result []CandidateElectionResult) {
         .      160ms    107:   rows, err := db.Query(`
         .          .    108:           SELECT c.id, c.name, c.political_party, c.sex, IFNULL(v.count, 0)
         .          .    109:           FROM candidates AS c
         .          .    110:           LEFT OUTER JOIN
         .          .    111:           (SELECT candidate_id, SUM(votes_num) AS count
         .          .    112:           FROM votes_sum
         .          .    113:           GROUP BY candidate_id) AS v
         .          .    114:           ON c.id = v.candidate_id
         .          .    115:           ORDER BY v.count DESC`)
         .          .    116:   if err != nil {
         .          .    117:           panic(err.Error())
         .          .    118:   }
         .          .    119:   defer rows.Close()
         .          .    120:
         .       50ms    121:   for rows.Next() {
         .          .    122:           r := CandidateElectionResult{}
         .       30ms    123:           err = rows.Scan(&r.ID, &r.Name, &r.PoliticalParty, &r.Sex, &r.VoteCount)
         .          .    124:           if err != nil {
         .          .    125:                   panic(err.Error())
         .          .    126:           }
         .       30ms    127:           result = append(result, r)
         .          .    128:   }
         .          .    129:   return
         .          .    130:}
ROUTINE ======================== main.getUser in /home/ishocon/webapp/go/user.go
         0       40ms (flat, cum)  0.16% of Total
         .          .     34:
         .          .     35:}
         .          .     36:
         .          .     37:func getUser(name string, address string, myNumber string) (User, error) {
         .          .     38:   key := name + address + myNumber
         .       40ms     39:   if _, ok := myNumberToUserCache[key]; !ok {
         .          .     40:           return User{}, errors.New("There is not user with mynumber")
         .          .     41:   }
         .          .     42:   return myNumberToUserCache[key], nil
         .          .     43:}
ROUTINE ======================== main.getUserVotedCount in /home/ishocon/webapp/go/vote.go
         0      1.90s (flat, cum)  7.55% of Total
         .          .     18:   row.Scan(&id, &count)
         .          .     19:   return
         .          .     20:}
         .          .     21:
         .          .     22:func getUserVotedCount(userID int) (count int) {
         .      1.51s     23:   row := db.QueryRow("SELECT user_id, SUM(votes_num) AS count FROM votes_sum GROUP BY user_id HAVING user_id = ?", userID)
         .          .     24:   var user_id int
         .      390ms     25:   row.Scan(&user_id, &count)
         .          .     26:   return
         .          .     27:}
         .          .     28:
         .          .     29:func createVote(userID int, candidateID int, keyword string, voteNum int) {
         .          .     30:   _, err := db.Exec("INSERT INTO votes_sum (user_id, candidate_id, keyword, votes_num) VALUES (?, ?, ?, ?)",
ROUTINE ======================== main.getVoiceOfSupporter in /home/ishocon/webapp/go/vote.go
         0      250ms (flat, cum)  0.99% of Total
         .          .     38:func getVoiceOfSupporter(candidateIDs []int) (voices []string) {
         .          .     39:   args := []interface{}{}
         .          .     40:   for _, candidateID := range candidateIDs {
         .          .     41:           args = append(args, candidateID)
         .          .     42:   }
         .      170ms     43:   rows, err := db.Query(`
         .          .     44:    SELECT keyword
         .          .     45:    FROM votes_sum
         .          .     46:    WHERE candidate_id IN (`+strings.Join(strings.Split(strings.Repeat("?", len(candidateIDs)), ""), ",")+`)
         .          .     47:    GROUP BY keyword
         .          .     48:    ORDER BY SUM(votes_num) DESC
         .          .     49:    LIMIT 10`, args...)
         .          .     50:   if err != nil {
         .          .     51:           return nil
         .          .     52:   }
         .          .     53:
         .          .     54:   defer rows.Close()
         .       70ms     55:   for rows.Next() {
         .          .     56:           var keyword string
         .          .     57:           err = rows.Scan(&keyword)
         .          .     58:           if err != nil {
         .          .     59:                   panic(err.Error())
         .          .     60:           }
         .       10ms     61:           voices = append(voices, keyword)
         .          .     62:   }
         .          .     63:   return
         .          .     64:}
ROUTINE ======================== main.getVoteCountByCandidateID in /home/ishocon/webapp/go/vote.go
         0      100ms (flat, cum)   0.4% of Total
         .          .     11:   CandidateID int
         .          .     12:   Keyword     string
         .          .     13:}
         .          .     14:
         .          .     15:func getVoteCountByCandidateID(candidateID int) (count int) {
         .      100ms     16:   row := db.QueryRow("SELECT candidate_id, SUM(votes_num) AS count FROM votes_sum GROUP BY candidate_id HAVING candidate_id = ?", candidateID)
         .          .     17:   var id int
         .          .     18:   row.Scan(&id, &count)
         .          .     19:   return
         .          .     20:}
         .          .     21:
ROUTINE ======================== main.main in /home/ishocon/webapp/go/main.go
         0      1.21s (flat, cum)  4.81% of Total
         .          .    190:   })
         .          .    191:
         .          .    192:   // for pprof
         .          .    193:   pprof.Register(r)
         .          .    194:
         .      1.21s    195:   r.Run(":8080")
         .          .    196:}
ROUTINE ======================== main.main.func1 in /home/ishocon/webapp/go/main.go
      10ms      1.66s (flat, cum)  6.59% of Total
         .          .     41:   store := sessions.NewCookieStore([]byte("mysession"))
         .          .     42:   store.Options(sessions.Options{HttpOnly: true})
         .          .     43:   r.Use(sessions.Sessions("showwin_happy", store))
         .          .     44:
         .          .     45:   // GET /
      10ms       10ms     46:   r.GET("/", func(c *gin.Context) {
         .      250ms     47:           electionResults := getElectionResult()
         .          .     48:
         .          .     49:           // 上位10人と最下位のみ表示
         .          .     50:           tmp := make([]CandidateElectionResult, len(electionResults))
         .          .     51:           copy(tmp, electionResults)
         .          .     52:           candidates := tmp[:10]
         .          .     53:           candidates = append(candidates, tmp[len(tmp)-1])
         .          .     54:
         .      160ms     55:           partyNames := getAllPartyName()
         .          .     56:           partyResultMap := map[string]int{}
         .          .     57:           for _, name := range partyNames {
         .          .     58:                   partyResultMap[name] = 0
         .          .     59:           }
         .          .     60:           for _, r := range electionResults {
         .       20ms     61:                   partyResultMap[r.PoliticalParty] += r.VoteCount
         .          .     62:           }
         .          .     63:           partyResults := []PartyElectionResult{}
         .          .     64:           for name, count := range partyResultMap {
         .          .     65:                   r := PartyElectionResult{}
         .          .     66:                   r.PoliticalParty = name
         .          .     67:                   r.VoteCount = count
         .          .     68:                   partyResults = append(partyResults, r)
         .          .     69:           }
         .          .     70:           // 投票数でソート
         .          .     71:           sort.Slice(partyResults, func(i, j int) bool { return partyResults[i].VoteCount > partyResults[j].VoteCount })
         .          .     72:
         .          .     73:           sexRatio := map[string]int{
         .          .     74:                   "men":   0,
         .          .     75:                   "women": 0,
         .          .     76:           }
         .          .     77:           for _, r := range electionResults {
         .          .     78:                   if r.Sex == "男" {
         .          .     79:                           sexRatio["men"] += r.VoteCount
         .          .     80:                   } else if r.Sex == "女" {
         .       10ms     81:                           sexRatio["women"] += r.VoteCount
         .          .     82:                   }
         .          .     83:           }
         .          .     84:
         .          .     85:           funcs := template.FuncMap{"indexPlus1": func(i int) int { return i + 1 }}
         .      520ms     86:           r.SetHTMLTemplate(template.Must(template.New("main").Funcs(funcs).ParseFiles(layout, "templates/index.tmpl")))
         .      690ms     87:           c.HTML(http.StatusOK, "base", gin.H{
         .          .     88:                   "candidates": candidates,
         .          .     89:                   "parties":    partyResults,
         .          .     90:                   "sexRatio":   sexRatio,
         .          .     91:           })
         .          .     92:   })
ROUTINE ======================== main.main.func2 in /home/ishocon/webapp/go/main.go
         0      460ms (flat, cum)  1.83% of Total
         .          .     96:           candidateID, _ := strconv.Atoi(c.Param("candidateID"))
         .          .     97:           candidate, err := getCandidate(candidateID)
         .          .     98:           if err != nil {
         .          .     99:                   c.Redirect(http.StatusFound, "/")
         .          .    100:           }
         .      100ms    101:           votes := getVoteCountByCandidateID(candidateID)
         .          .    102:           candidateIDs := []int{candidateID}
         .      190ms    103:           keywords := getVoiceOfSupporter(candidateIDs)
         .          .    104:
         .       80ms    105:           r.SetHTMLTemplate(template.Must(template.ParseFiles(layout, "templates/candidate.tmpl")))
         .       90ms    106:           c.HTML(http.StatusOK, "base", gin.H{
         .          .    107:                   "candidate": candidate,
         .          .    108:                   "votes":     votes,
         .          .    109:                   "keywords":  keywords,
         .          .    110:           })
         .          .    111:   })
ROUTINE ======================== main.main.func3 in /home/ishocon/webapp/go/main.go
         0      210ms (flat, cum)  0.83% of Total
         .          .    112:
         .          .    113:   // GET /political_parties/:name(string)
         .          .    114:   r.GET("/political_parties/:name", func(c *gin.Context) {
         .          .    115:           partyName := c.Param("name")
         .          .    116:           var votes int
         .       20ms    117:           electionResults := getElectionResult()
         .          .    118:           for _, r := range electionResults {
         .          .    119:                   if r.PoliticalParty == partyName {
         .          .    120:                           votes += r.VoteCount
         .          .    121:                   }
         .          .    122:           }
         .          .    123:
         .       50ms    124:           candidates := getCandidatesByPoliticalParty(partyName)
         .          .    125:           candidateIDs := []int{}
         .          .    126:           for _, c := range candidates {
         .          .    127:                   candidateIDs = append(candidateIDs, c.ID)
         .          .    128:           }
         .       60ms    129:           keywords := getVoiceOfSupporter(candidateIDs)
         .          .    130:
         .       30ms    131:           r.SetHTMLTemplate(template.Must(template.ParseFiles(layout, "templates/political_party.tmpl")))
         .       50ms    132:           c.HTML(http.StatusOK, "base", gin.H{
         .          .    133:                   "politicalParty": partyName,
         .          .    134:                   "votes":          votes,
         .          .    135:                   "candidates":     candidates,
         .          .    136:                   "keywords":       keywords,
         .          .    137:           })
ROUTINE ======================== main.main.func5 in /home/ishocon/webapp/go/main.go
         0      9.91s (flat, cum) 39.36% of Total
         .          .    148:           })
         .          .    149:   })
         .          .    150:
         .          .    151:   // POST /vote
         .          .    152:   r.POST("/vote", func(c *gin.Context) {
         .      590ms    153:           user, userErr := getUser(c.PostForm("name"), c.PostForm("address"), c.PostForm("mynumber"))
         .          .    154:           candidate, cndErr := getCandidateByName(c.PostForm("candidate"))
         .      1.90s    155:           votedCount := getUserVotedCount(user.ID)
         .          .    156:           candidates := getAllCandidate()
         .          .    157:           voteCount, _ := strconv.Atoi(c.PostForm("vote_count"))
         .          .    158:
         .          .    159:           var message string
         .      2.27s    160:           r.SetHTMLTemplate(template.Must(template.ParseFiles(layout, "templates/vote.tmpl")))
         .          .    161:           if userErr != nil {
         .          .    162:                   message = "個人情報に誤りがあります"
         .          .    163:           } else if user.Votes < voteCount+votedCount {
         .          .    164:                   message = "投票数が上限を超えています"
         .       10ms    165:           } else if c.PostForm("candidate") == "" {
         .          .    166:                   message = "候補者を記入してください"
         .          .    167:           } else if cndErr != nil {
         .          .    168:                   message = "候補者を正しく記入してください"
         .          .    169:           } else if c.PostForm("keyword") == "" {
         .          .    170:                   message = "投票理由を記入してください"
         .          .    171:           } else {
         .      1.51s    172:                   createVote(user.ID, candidate.ID, c.PostForm("keyword"), voteCount)
         .          .    173:                   message = "投票に成功しました"
         .          .    174:           }
         .      3.63s    175:           c.HTML(http.StatusOK, "base", gin.H{
         .          .    176:                   "candidates": candidates,
         .          .    177:                   "message":    message,
         .          .    178:           })
         .          .    179:   })
         .          .    180:
ROUTINE ======================== main.main.func6 in /home/ishocon/webapp/go/main.go
         0      4.53s (flat, cum) 17.99% of Total
         .          .    179:   })
         .          .    180:
         .          .    181:   r.GET("/initialize", func(c *gin.Context) {
         .          .    182:           db.Exec("DELETE FROM votes_sum")
         .          .    183:           fetchAllCandidates()
         .      4.53s    184:           cacheAllUsers()
         .          .    185:           c.String(http.StatusOK, "Finish")
         .          .    186:   })
         .          .    187:
         .          .    188:   r.GET("/health", func(c *gin.Context) {
         .          .    189:           c.String(http.StatusOK, "OK")